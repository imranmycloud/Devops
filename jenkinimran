pipeline {
    agent any
     environment {
        AWS_ACCOUNT_ID="900671793678"
        AWS_DEFAULT_REGION="us-east-1"
        IMAGE_REPO_NAME="devopshint"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "900671793678.dkr.ecr.us-east-1.amazonaws.com/devopshint"
    }

    stages {
          stage('Checkout code') {
              steps {
                  checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/imranmycloud/Devops.git']])
              }
          }
  stage('Install Maven Build Tool') {
            steps { 
                sh 'wget https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz'
                sh 'tar -xzvf /var/lib/jenkins/workspace/test/apache-maven-3.9.4-bin.tar.gz'
             } 
           }
 stage('Compile Sample Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main'){
                sh '/var/lib/jenkins/workspace/test/apache-maven-3.9.4/bin/mvn compile'
            }
           }
        }
 stage('Test Sample Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main'){
                sh '/var/lib/jenkins/workspace/test/apache-maven-3.9.4/bin/mvn test'
            }
           }
        }
 stage('Package Sample Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main'){
                sh '/var/lib/jenkins/workspace/test/apache-maven-3.9.4/bin/mvn package'
            }
           }
        }
 stage('sonar analysis') {
            steps {
                dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main'){
                withSonarQubeEnv(credentialsId:'sonar-tocken',installationName:'Sonar-Qube-server'){
                sh "/var/lib/jenkins/workspace/test/apache-maven-3.9.4/bin/mvn clean verify sonar:sonar  -Dsonar.projectKey=test_project2   -Dsonar.projectName='test_project2'"
                }
            }
           }
        }
 stage('Nexus Artifact Upload') {
            steps {
                dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main/target'){
             nexusArtifactUploader artifacts: [[artifactId: 'testartifactid', classifier: '', file: 'addressbook.war', type: 'war']], credentialsId: 'nexus-credentialss', groupId: 'com.test.app', nexusUrl: '107.23.191.105:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'testreponexus', version: '2.1.1-SNAPSHOT'
            }
           }
        }
        stage('Logging into AWS ECR') {
            steps {
                script {
                sh """aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                }
           }
        }
        stage('Building image') {
    steps {
        script {
            dockerImage = docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG}", "/var/lib/jenkins/workspace/test/addressbook/addressbook_main")
        }
    }
}
      stage('Pushing to ECR') {
            steps {
            dir('/var/lib/jenkins/workspace/test/addressbook/addressbook_main')
                script {
                sh """docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"""
                sh """docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"""
               }
            }
        }




    }
}
